{"version":3,"sources":["App.js","index.js"],"names":["operations","generateGrid","random","rows","i","push","Array","from","Math","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","onClick","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAOMA,G,MAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,KAGDC,EAAe,SAACC,GAEpB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IACtBF,EAGHC,EAAKE,KACHC,MAAMC,KAAKD,MApBH,KAoBmB,kBAAOE,KAAKN,SAAW,GAAM,EAAI,MAH9DC,EAAKE,KAAKC,MAAMC,KAAKD,MAjBX,KAiB2B,kBAAM,MAO/C,OAAOH,GA6GMM,MA1Gf,WAAgB,IAAD,EACWC,oBAAS,WAC/B,OAAOT,GAAa,MAFT,mBACNU,EADM,KACAC,EADA,OAKiBF,oBAAS,GAL1B,mBAKNG,EALM,KAKGC,EALH,KAOPC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBlB,GACP,IAF4B,eAEnBmB,GACP,IAAIC,EAAY,EAChBxB,EAAWyB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACzBC,EAAOxB,EAAIsB,EACXG,EAAON,EAAII,EAKXC,GAAQ,GAAKA,EAtDf,IAsDiCC,GAAQ,GAAKA,EArD9C,KAsDAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASlB,GAAGmB,GAAK,EACI,IAAZH,EAAEhB,GAAGmB,IAA0B,IAAdC,IAC1BF,EAASlB,GAAGmB,GAAK,IAjBZA,EAAI,EAAGA,EA5CV,GA4CuBA,IAAM,EAA1BA,IADFnB,EAAI,EAAGA,EA5CR,GA4CqBA,IAAM,EAA1BA,SAwBb0B,WAAWZ,EAAe,QACzB,IAEH,OACE,yBAAKa,UAAU,QACb,yBAAKA,UAAU,YACb,4BACEC,QAAS,WACPlB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAIH,IACAL,EAAU,kBAAoB,oBAEjC,4BACEmB,QAAS,WACPpB,EAAQX,GAAa,MAFzB,gBAOA,8CACA,4BACE+B,QAAS,WACPpB,EAAQX,GAAa,MAFzB,gBAQF,yBACE8B,UAAU,OACVE,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAzGb,GAyGa,aAGpBxB,EAAKyB,KAAI,SAACjC,EAAMC,GAAP,OACRD,EAAKiC,KAAI,SAACC,EAAKd,GAAN,OACP,yBACEQ,UAAU,MACVO,IAAG,UAAKlC,EAAL,YAAUmB,GACbS,QAAS,WACP,IAAMO,EAAUlB,YAAQV,GAAM,SAACW,GAC7BA,EAASlB,GAAGmB,GAAKZ,EAAKP,GAAGmB,GAAK,EAAI,KAEpCX,EAAQ2B,IAEVN,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRC,gBAAiB/B,EAAKP,GAAGmB,GAAK,aAAUoB,EACxCC,OAAQ,8BC1HxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.cacb9cf5.chunk.js","sourcesContent":["import produce from \"immer\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateGrid = (random) => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    if (!random) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    } else {\n      rows.push(\n        Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n      );\n    }\n  }\n  return rows;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    return generateGrid(false);\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              let newI = i + x;\n              let newJ = j + y;\n              // if (newI < 0) newI += numRows;\n              // if (newI >= numRows) newI -= numRows;\n              // if (newJ < 0) newJ += numCols;\n              // if (newJ >= numCols) newJ -= numCols;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <div className=\"body\">\n      <div className=\"controls\">\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {\" \"}\n          {running ? \"stop simulation\" : \"start simulation\"}\n        </button>\n        <button\n          onClick={() => {\n            setGrid(generateGrid(true));\n          }}\n        >\n          Random Board\n        </button>\n        <button>Loop Board</button>\n        <button\n          onClick={() => {\n            setGrid(generateGrid(false));\n          }}\n        >\n          Clear Board\n        </button>\n      </div>\n      <div\n        className=\"grid\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, j) => (\n            <div\n              className=\"box\"\n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? \"black\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}