{"version":3,"sources":["App.js","index.js"],"names":["operations","App","useState","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","style","margin","onClick","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAMMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IA4FQC,MAxFf,WAAgB,IAAD,EACWC,oBAAS,WAE/B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAlBJ,GAkBiBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAlBX,KAkB2B,kBAAM,MAE7C,OAAOH,KANI,mBACNK,EADM,KACAC,EADA,OASiBP,oBAAS,GAT1B,mBASNQ,EATM,KASGC,EATH,KAWPC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAGrB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBf,GACP,IAF0B,eAEjBgB,GACP,IAAIC,EAAY,EAChBrB,EAAWsB,SAAQ,YAAY,IAAD,mBAATC,EAAS,KAAPC,EAAO,KACxBC,EAAOrB,EAAEmB,EACTG,EAAON,EAAEI,EACTC,EAAO,IAAGA,GA1CZ,IA2CEA,GA3CF,KA2CmBA,GA3CnB,IA4CEC,EAAO,IAAGA,GA3CZ,IA4CEA,GA5CF,KA4CmBA,GA5CnB,IA6CED,GAAQ,GAAKA,EA9Cf,IA8CiCC,GAAQ,GAAKA,EA7C9C,KA8CAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASf,GAAGgB,GAAK,EACI,IAAZH,EAAEb,GAAGgB,IAA0B,IAAdC,IAC1BF,EAASf,GAAGgB,GAAK,IAjBZA,EAAI,EAAGA,EApCV,GAoCuBA,IAAK,EAAzBA,IADFhB,EAAI,EAAGA,EApCR,GAoCqBA,IAAK,EAAzBA,SAyBbuB,WAAWZ,EAAe,QACzB,IAEH,OACE,yBAAKa,MAAO,CAACC,OAAQ,SACnB,4BAAQC,QAAS,WACfnB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAJJ,IAMKL,EAAU,kBAAoB,oBACnC,yBACEkB,MAAO,CACLG,QAAS,OACTC,oBAAoB,UAAD,OA3Eb,GA2Ea,aAGpBxB,EAAKyB,KAAI,SAAC9B,EAAMC,GAAP,OACRD,EAAK8B,KAAI,SAACC,EAAKd,GAAN,OACP,yBACEe,IAAG,UAAK/B,EAAL,YAAUgB,GACbU,QAAS,WACP,IAAMM,EAAUlB,YAAQV,GAAM,SAACW,GAC7BA,EAASf,GAAGgB,GAAKZ,EAAKJ,GAAGgB,GAAK,EAAI,KAEpCX,EAAQ2B,IAEVR,MAAO,CACLS,MAAO,GACPC,OAAQ,GACRC,gBAAiB/B,EAAKJ,GAAGgB,GAAK,aAAUoB,EACxCC,OAAQ,8BC1FxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.fce8adf7.chunk.js","sourcesContent":["import produce from \"immer\";\nimport React, { useCallback, useRef, useState } from \"react\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n]\n\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) =>{\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++){\n          for (let j = 0; j < numCols; j++){\n            let neighbors = 0;\n            operations.forEach(([x,y]) => {\n              let newI = i+x;\n              let newJ = j+y;\n              if (newI < 0) newI += numRows;\n              if (newI >= numRows) newI -= numRows;\n              if (newJ < 0) newJ += numCols;\n              if (newJ >= numCols) newJ -= numCols;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols){\n                neighbors += g[newI][newJ]\n              }\n            })\n\n            if (neighbors < 2 || neighbors > 3){\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3){\n              gridCopy[i][j] = 1;\n            }\n          \n          }\n        }\n      })\n    })\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <div style={{margin: \"20px\"}}>\n      <button onClick={() => {\n        setRunning(!running);\n        if (!running){\n          runningRef.current = true;\n          runSimulation();\n        }\n      }}> {running ? \"stop simulation\" : \"start simulation\"}</button>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? \"black\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}